# ----------------------------------------------------------------
# crunch CLI configuration variables
# ----------------------------------------------------------------
# [CRUNCH_STASHES] Validator stash addresses for which 'crunch flakes', 'crunch rewards'
# or 'crunch view' will be applied.
# If needed specify more than one (e.g. stash_1,stash_2,stash_3).
CRUNCH_STASHES=5GTD7ZeD823BjpmZBCSzBQp7cvHR1Gunq7oDkurZr9zUev2n
#
# [CRUNCH_STASHES_URL] Additionally the list of stashes could be defined and available in a remote file.
# `crunch` will try to fetch the stashes from the endpoint predefined here before triggering the respective payouts
# Please have a look at the file '.remote.stashes.example' as an example
#CRUNCH_STASHES_URL=https://raw.githubusercontent.com/turboflakes/crunch/main/.remote.stashes.example
#
# [CRUNCH_GITHUB_PAT] Define a 'Github personal access token' with at least readonly access to the remote file
# containing the list of stashes in the github private file defined at 'CRUNCH_STASHES_URL'
# Check how to create a personal access token here:
# https://docs.github.com/en/authentication/keeping-your-account-and-data-secure/managing-your-personal-access-tokens
#
#CRUNCH_GITHUB_PAT=github_pat_123ABC...
#
# [CRUNCH_LIGHT_CLIENT_ENABLED] Enable lightweight client to connect to substrate-based chains.
# With this option enabled there is no need to specify specific RPCs endpoints for 'substrate-ws-url' or 'substrate-people-ws-url'
#CRUNCH_LIGHT_CLIENT_ENABLED=false
#
# [CRUNCH_SUBSTRATE_WS_URL] Substrate websocket endpoint for which 'crunch' will try to
# connect. (e.g. wss://rpc.turboflakes.io:443/kusama) (NOTE: substrate_ws_url takes precedence
# than <CHAIN> argument)
CRUNCH_SUBSTRATE_WS_URL=ws://localhost:9944
#
# [CRUNCH_SUBSTRATE_PEOPLE_WS_URL] Substrate websocket endpoint for which 'crunch' will try to
# connect and retrieve identities from. (e.g. wss://sys.turboflakes.io:443/people-kusama)
#CRUNCH_SUBSTRATE_PEOPLE_WS_URL=wss://sys.turboflakes.io:443/people-kusama
#
# [CRUNCH_MAXIMUM_PAYOUTS] Maximum number of unclaimed eras for which an extrinsic payout
# will be submitted. (e.g. a value of 4 means that if there are unclaimed eras in the last
# 84 the maximum unclaimed payout calls for each stash address will be 4). [default: 4]
CRUNCH_MAXIMUM_PAYOUTS=4
#
# [CRUNCH_MAXIMUM_HISTORY_ERAS] Maximum number of history eras for which crunch will look for
# unclaimed rewards. The maximum value supported is the one defined by constant history_depth
# (e.g. a value of 4 means that crunch will only check in the latest 4 eras if there are any
# unclaimed rewards for each stash address). [default: 4]
CRUNCH_MAXIMUM_HISTORY_ERAS=4
#
# [CRUNCH_MAXIMUM_CALLS] Maximum number of calls in a single batch. [default: 3]
CRUNCH_MAXIMUM_CALLS=3
#
# [CRUNCH_SEED_PATH] File path containing the private seed phrase to Sign the extrinsic
# payout call. [default: .private.seed]
#CRUNCH_SEED_PATH=.private.seed.example
#
# ----------------------------------------------------------------
# Matrix configuration variables
# ----------------------------------------------------------------
# [CRUNCH_MATRIX_DISABLED] Disable matrix bot, unless specified otherwise matrix is enabled and respective
# matrix variables below need to be correctly defined.
#CRUNCH_MATRIX_DISABLED=false
#
# [CRUNCH_MATRIX_PUBLIC_ROOM_DISABLED] Disable public matrix room, unless specified otherwise messages will also
# be sent to the public room.
#CRUNCH_MATRIX_PUBLIC_ROOM_DISABLED=true
#
CRUNCH_MATRIX_USER=@your-regular-matrix-account:matrix.org
CRUNCH_MATRIX_BOT_USER=@your-own-crunch-bot-account:matrix.org
# NOTE: type the bot password within "" so that any special character could be parsed correctly into a string.
CRUNCH_MATRIX_BOT_PASSWORD="anotthateasypassword"
#
# ----------------------------------------------------------------
# ONE-T configuration variables
# ----------------------------------------------------------------
# Note: If ONET_API_ENABLED equals true, by default Crunch will try to fetch the validator grade from the respective
# network it is connected to.
#CRUNCH_ONET_API_ENABLED=true
#
# [CRUNCH_ONET_API_URL] Define a custom ONET backend endpoint
#CRUNCH_ONET_API_URL=https://polkadot-onet-api.turboflakes.io
#
# [CRUNCH_ONET_API_KEY] Define a custom ONET api key.
#CRUNCH_ONET_API_KEY=crunch-101
#
# [CRUNCH_ONET_NUMBER_LAST_SESSIONS] Define the number of last sessions the grade is evaluated. Default is 6.
#CRUNCH_ONET_NUMBER_LAST_SESSIONS=6
#
# ----------------------------------------------------------------
# Nomination Pools configuration variables
# ----------------------------------------------------------------
# [CRUNCH_POOL_IDS] Additionally the list of stashes could be defined from a single or more Nomination Pool Ids.
# `crunch` will try to fetch the nominees of the respective pool id predefined here before triggering the respective payouts
CRUNCH_POOL_IDS=2
#
# [CRUNCH_POOL_COMPOUND_THRESHOLD] Define minimum pending rewards threshold in PLANCKS.
# Note: only pending rewards above the threshold are included in the auto-compound batch.
# 1 DOT = 10000000000 PLANCKS
# 1 KSM = 1000000000000 PLANCKS
CRUNCH_POOL_COMPOUND_THRESHOLD=10000000000
#
# [CRUNCH_POOL_MEMBERS_COMPOUND_ENABLED] Enable auto-compound rewards for every member that belongs to the pools
# previously selected by CRUNCH_POOL_IDS. Note that members have to have their permissions
# set as PermissionlessCompound or PermissionlessAll.
#CRUNCH_POOL_MEMBERS_COMPOUND_ENABLED=true
#
# [CRUNCH_POOL_ONLY_OPERATOR_COMPOUND_ENABLED] Enable auto-compound rewards for the pool operator member that belongs to the pools
# previously selected by CRUNCH_POOL_IDS. Note that operator member account have to have their permissions
# set as PermissionlessCompound or PermissionlessAll.
CRUNCH_POOL_ONLY_OPERATOR_COMPOUND_ENABLED=true
#
# [CRUNCH_POOL_ACTIVE_NOMINEES_PAYOUT_ENABLED] Enable payouts only for ACTIVE nominees assigned to the pools
# previously selected by CRUNCH_POOL_IDS.
#CRUNCH_POOL_ACTIVE_NOMINEES_PAYOUT_ENABLED=true
#
# [CRUNCH_POOL_ALL_NOMINEES_PAYOUT_ENABLED] Enable payouts for ALL nominees assigned to the pools
# previously selected by CRUNCH_POOL_IDS.
#CRUNCH_POOL_ALL_NOMINEES_PAYOUT_ENABLED=true
#
# [CRUNCH_POOL_CLAIM_COMMISSION_ENABLED] Enable permissionless claim pool commission
# NOTE: Is only possible for the pool commission to be claimed permissionless, if the nomination pool root account
# explicitly sets this feature via extrinsic `set_commission_claim_permission`.
CRUNCH_POOL_CLAIM_COMMISSION_ENABLED=true
#
# ----------------------------------------------------------------
# Transaction configuration variables
# ----------------------------------------------------------------
#
# [CRUNCH_TX_TIP] Define a tip in PLANCKS for the block author.
# 1 DOT = 10000000000 PLANCKS
# 1 KSM = 1000000000000 PLANCKS
#CRUNCH_TX_TIP=10
#
# [CRUNCH_TX_MORTAL_PERIOD] Define the number of blocks the transaction is mortal for.
#CRUNCH_TX_MORTAL_PERIOD=32
